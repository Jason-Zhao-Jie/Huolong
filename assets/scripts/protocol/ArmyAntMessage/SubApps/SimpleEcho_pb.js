/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

 
var goog = jspb;
var global = Function('return this')();

var ArmyAntMessage_Common_base_pb = require('../../ArmyAntMessage/Common/base_pb.js');
goog.object.extend(proto, ArmyAntMessage_Common_base_pb);
goog.exportSymbol('proto.ArmyAntMessage.SubApps.C2SM_EchoBroadcastRequest', null, global);
goog.exportSymbol('proto.ArmyAntMessage.SubApps.C2SM_EchoLoginRequest', null, global);
goog.exportSymbol('proto.ArmyAntMessage.SubApps.C2SM_EchoLogoutRequest', null, global);
goog.exportSymbol('proto.ArmyAntMessage.SubApps.C2SM_EchoSendRequest', null, global);
goog.exportSymbol('proto.ArmyAntMessage.SubApps.SM2C_EchoBroadcastResponse', null, global);
goog.exportSymbol('proto.ArmyAntMessage.SubApps.SM2C_EchoError', null, global);
goog.exportSymbol('proto.ArmyAntMessage.SubApps.SM2C_EchoLoginResponse', null, global);
goog.exportSymbol('proto.ArmyAntMessage.SubApps.SM2C_EchoLogoutResponse', null, global);
goog.exportSymbol('proto.ArmyAntMessage.SubApps.SM2C_EchoReceiveNotice', null, global);
goog.exportSymbol('proto.ArmyAntMessage.SubApps.SM2C_EchoSendResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ArmyAntMessage.SubApps.C2SM_EchoLoginRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ArmyAntMessage.SubApps.C2SM_EchoLoginRequest, jspb.Message);
  {
  proto.ArmyAntMessage.SubApps.C2SM_EchoLoginRequest.displayName = 'proto.ArmyAntMessage.SubApps.C2SM_EchoLoginRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ArmyAntMessage.SubApps.C2SM_EchoLoginRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ArmyAntMessage.SubApps.C2SM_EchoLoginRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ArmyAntMessage.SubApps.C2SM_EchoLoginRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ArmyAntMessage.SubApps.C2SM_EchoLoginRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ArmyAntMessage.SubApps.C2SM_EchoLoginRequest}
 */
proto.ArmyAntMessage.SubApps.C2SM_EchoLoginRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ArmyAntMessage.SubApps.C2SM_EchoLoginRequest;
  return proto.ArmyAntMessage.SubApps.C2SM_EchoLoginRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ArmyAntMessage.SubApps.C2SM_EchoLoginRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ArmyAntMessage.SubApps.C2SM_EchoLoginRequest}
 */
proto.ArmyAntMessage.SubApps.C2SM_EchoLoginRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ArmyAntMessage.SubApps.C2SM_EchoLoginRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ArmyAntMessage.SubApps.C2SM_EchoLoginRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ArmyAntMessage.SubApps.C2SM_EchoLoginRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ArmyAntMessage.SubApps.C2SM_EchoLoginRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string user_name = 1;
 * @return {string}
 */
proto.ArmyAntMessage.SubApps.C2SM_EchoLoginRequest.prototype.getUserName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ArmyAntMessage.SubApps.C2SM_EchoLoginRequest.prototype.setUserName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoLoginResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ArmyAntMessage.SubApps.SM2C_EchoLoginResponse, jspb.Message);
  {
  proto.ArmyAntMessage.SubApps.SM2C_EchoLoginResponse.displayName = 'proto.ArmyAntMessage.SubApps.SM2C_EchoLoginResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoLoginResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ArmyAntMessage.SubApps.SM2C_EchoLoginResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ArmyAntMessage.SubApps.SM2C_EchoLoginResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoLoginResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ArmyAntMessage.SubApps.SM2C_EchoLoginResponse}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoLoginResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ArmyAntMessage.SubApps.SM2C_EchoLoginResponse;
  return proto.ArmyAntMessage.SubApps.SM2C_EchoLoginResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ArmyAntMessage.SubApps.SM2C_EchoLoginResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ArmyAntMessage.SubApps.SM2C_EchoLoginResponse}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoLoginResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoLoginResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ArmyAntMessage.SubApps.SM2C_EchoLoginResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ArmyAntMessage.SubApps.SM2C_EchoLoginResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoLoginResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 result = 1;
 * @return {number}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoLoginResponse.prototype.getResult = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ArmyAntMessage.SubApps.SM2C_EchoLoginResponse.prototype.setResult = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoLoginResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ArmyAntMessage.SubApps.SM2C_EchoLoginResponse.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ArmyAntMessage.SubApps.C2SM_EchoLogoutRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ArmyAntMessage.SubApps.C2SM_EchoLogoutRequest, jspb.Message);
  {
  proto.ArmyAntMessage.SubApps.C2SM_EchoLogoutRequest.displayName = 'proto.ArmyAntMessage.SubApps.C2SM_EchoLogoutRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ArmyAntMessage.SubApps.C2SM_EchoLogoutRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ArmyAntMessage.SubApps.C2SM_EchoLogoutRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ArmyAntMessage.SubApps.C2SM_EchoLogoutRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ArmyAntMessage.SubApps.C2SM_EchoLogoutRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ArmyAntMessage.SubApps.C2SM_EchoLogoutRequest}
 */
proto.ArmyAntMessage.SubApps.C2SM_EchoLogoutRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ArmyAntMessage.SubApps.C2SM_EchoLogoutRequest;
  return proto.ArmyAntMessage.SubApps.C2SM_EchoLogoutRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ArmyAntMessage.SubApps.C2SM_EchoLogoutRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ArmyAntMessage.SubApps.C2SM_EchoLogoutRequest}
 */
proto.ArmyAntMessage.SubApps.C2SM_EchoLogoutRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ArmyAntMessage.SubApps.C2SM_EchoLogoutRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ArmyAntMessage.SubApps.C2SM_EchoLogoutRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ArmyAntMessage.SubApps.C2SM_EchoLogoutRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ArmyAntMessage.SubApps.C2SM_EchoLogoutRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string user_name = 1;
 * @return {string}
 */
proto.ArmyAntMessage.SubApps.C2SM_EchoLogoutRequest.prototype.getUserName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ArmyAntMessage.SubApps.C2SM_EchoLogoutRequest.prototype.setUserName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoLogoutResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ArmyAntMessage.SubApps.SM2C_EchoLogoutResponse, jspb.Message);
  {
  proto.ArmyAntMessage.SubApps.SM2C_EchoLogoutResponse.displayName = 'proto.ArmyAntMessage.SubApps.SM2C_EchoLogoutResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoLogoutResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ArmyAntMessage.SubApps.SM2C_EchoLogoutResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ArmyAntMessage.SubApps.SM2C_EchoLogoutResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoLogoutResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ArmyAntMessage.SubApps.SM2C_EchoLogoutResponse}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoLogoutResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ArmyAntMessage.SubApps.SM2C_EchoLogoutResponse;
  return proto.ArmyAntMessage.SubApps.SM2C_EchoLogoutResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ArmyAntMessage.SubApps.SM2C_EchoLogoutResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ArmyAntMessage.SubApps.SM2C_EchoLogoutResponse}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoLogoutResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoLogoutResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ArmyAntMessage.SubApps.SM2C_EchoLogoutResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ArmyAntMessage.SubApps.SM2C_EchoLogoutResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoLogoutResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 result = 1;
 * @return {number}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoLogoutResponse.prototype.getResult = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ArmyAntMessage.SubApps.SM2C_EchoLogoutResponse.prototype.setResult = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoLogoutResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ArmyAntMessage.SubApps.SM2C_EchoLogoutResponse.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ArmyAntMessage.SubApps.C2SM_EchoSendRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ArmyAntMessage.SubApps.C2SM_EchoSendRequest, jspb.Message);
  {
  proto.ArmyAntMessage.SubApps.C2SM_EchoSendRequest.displayName = 'proto.ArmyAntMessage.SubApps.C2SM_EchoSendRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ArmyAntMessage.SubApps.C2SM_EchoSendRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ArmyAntMessage.SubApps.C2SM_EchoSendRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ArmyAntMessage.SubApps.C2SM_EchoSendRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ArmyAntMessage.SubApps.C2SM_EchoSendRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: jspb.Message.getFieldWithDefault(msg, 1, ""),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ArmyAntMessage.SubApps.C2SM_EchoSendRequest}
 */
proto.ArmyAntMessage.SubApps.C2SM_EchoSendRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ArmyAntMessage.SubApps.C2SM_EchoSendRequest;
  return proto.ArmyAntMessage.SubApps.C2SM_EchoSendRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ArmyAntMessage.SubApps.C2SM_EchoSendRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ArmyAntMessage.SubApps.C2SM_EchoSendRequest}
 */
proto.ArmyAntMessage.SubApps.C2SM_EchoSendRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTarget(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ArmyAntMessage.SubApps.C2SM_EchoSendRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ArmyAntMessage.SubApps.C2SM_EchoSendRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ArmyAntMessage.SubApps.C2SM_EchoSendRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ArmyAntMessage.SubApps.C2SM_EchoSendRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTarget();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string target = 1;
 * @return {string}
 */
proto.ArmyAntMessage.SubApps.C2SM_EchoSendRequest.prototype.getTarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ArmyAntMessage.SubApps.C2SM_EchoSendRequest.prototype.setTarget = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.ArmyAntMessage.SubApps.C2SM_EchoSendRequest.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ArmyAntMessage.SubApps.C2SM_EchoSendRequest.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoSendResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ArmyAntMessage.SubApps.SM2C_EchoSendResponse, jspb.Message);
  {
  proto.ArmyAntMessage.SubApps.SM2C_EchoSendResponse.displayName = 'proto.ArmyAntMessage.SubApps.SM2C_EchoSendResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoSendResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ArmyAntMessage.SubApps.SM2C_EchoSendResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ArmyAntMessage.SubApps.SM2C_EchoSendResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoSendResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    request: (f = msg.getRequest()) && proto.ArmyAntMessage.SubApps.C2SM_EchoSendRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ArmyAntMessage.SubApps.SM2C_EchoSendResponse}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoSendResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ArmyAntMessage.SubApps.SM2C_EchoSendResponse;
  return proto.ArmyAntMessage.SubApps.SM2C_EchoSendResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ArmyAntMessage.SubApps.SM2C_EchoSendResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ArmyAntMessage.SubApps.SM2C_EchoSendResponse}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoSendResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = new proto.ArmyAntMessage.SubApps.C2SM_EchoSendRequest;
      reader.readMessage(value,proto.ArmyAntMessage.SubApps.C2SM_EchoSendRequest.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoSendResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ArmyAntMessage.SubApps.SM2C_EchoSendResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ArmyAntMessage.SubApps.SM2C_EchoSendResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoSendResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ArmyAntMessage.SubApps.C2SM_EchoSendRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 result = 1;
 * @return {number}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoSendResponse.prototype.getResult = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ArmyAntMessage.SubApps.SM2C_EchoSendResponse.prototype.setResult = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoSendResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ArmyAntMessage.SubApps.SM2C_EchoSendResponse.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional C2SM_EchoSendRequest request = 3;
 * @return {?proto.ArmyAntMessage.SubApps.C2SM_EchoSendRequest}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoSendResponse.prototype.getRequest = function() {
  return /** @type{?proto.ArmyAntMessage.SubApps.C2SM_EchoSendRequest} */ (
    jspb.Message.getWrapperField(this, proto.ArmyAntMessage.SubApps.C2SM_EchoSendRequest, 3));
};


/** @param {?proto.ArmyAntMessage.SubApps.C2SM_EchoSendRequest|undefined} value */
proto.ArmyAntMessage.SubApps.SM2C_EchoSendResponse.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.ArmyAntMessage.SubApps.SM2C_EchoSendResponse.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoSendResponse.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ArmyAntMessage.SubApps.C2SM_EchoBroadcastRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ArmyAntMessage.SubApps.C2SM_EchoBroadcastRequest, jspb.Message);
  {
  proto.ArmyAntMessage.SubApps.C2SM_EchoBroadcastRequest.displayName = 'proto.ArmyAntMessage.SubApps.C2SM_EchoBroadcastRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ArmyAntMessage.SubApps.C2SM_EchoBroadcastRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ArmyAntMessage.SubApps.C2SM_EchoBroadcastRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ArmyAntMessage.SubApps.C2SM_EchoBroadcastRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ArmyAntMessage.SubApps.C2SM_EchoBroadcastRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ArmyAntMessage.SubApps.C2SM_EchoBroadcastRequest}
 */
proto.ArmyAntMessage.SubApps.C2SM_EchoBroadcastRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ArmyAntMessage.SubApps.C2SM_EchoBroadcastRequest;
  return proto.ArmyAntMessage.SubApps.C2SM_EchoBroadcastRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ArmyAntMessage.SubApps.C2SM_EchoBroadcastRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ArmyAntMessage.SubApps.C2SM_EchoBroadcastRequest}
 */
proto.ArmyAntMessage.SubApps.C2SM_EchoBroadcastRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ArmyAntMessage.SubApps.C2SM_EchoBroadcastRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ArmyAntMessage.SubApps.C2SM_EchoBroadcastRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ArmyAntMessage.SubApps.C2SM_EchoBroadcastRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ArmyAntMessage.SubApps.C2SM_EchoBroadcastRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.ArmyAntMessage.SubApps.C2SM_EchoBroadcastRequest.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ArmyAntMessage.SubApps.C2SM_EchoBroadcastRequest.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoBroadcastResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ArmyAntMessage.SubApps.SM2C_EchoBroadcastResponse, jspb.Message);
  {
  proto.ArmyAntMessage.SubApps.SM2C_EchoBroadcastResponse.displayName = 'proto.ArmyAntMessage.SubApps.SM2C_EchoBroadcastResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoBroadcastResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ArmyAntMessage.SubApps.SM2C_EchoBroadcastResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ArmyAntMessage.SubApps.SM2C_EchoBroadcastResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoBroadcastResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    request: (f = msg.getRequest()) && proto.ArmyAntMessage.SubApps.C2SM_EchoBroadcastRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ArmyAntMessage.SubApps.SM2C_EchoBroadcastResponse}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoBroadcastResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ArmyAntMessage.SubApps.SM2C_EchoBroadcastResponse;
  return proto.ArmyAntMessage.SubApps.SM2C_EchoBroadcastResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ArmyAntMessage.SubApps.SM2C_EchoBroadcastResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ArmyAntMessage.SubApps.SM2C_EchoBroadcastResponse}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoBroadcastResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = new proto.ArmyAntMessage.SubApps.C2SM_EchoBroadcastRequest;
      reader.readMessage(value,proto.ArmyAntMessage.SubApps.C2SM_EchoBroadcastRequest.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoBroadcastResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ArmyAntMessage.SubApps.SM2C_EchoBroadcastResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ArmyAntMessage.SubApps.SM2C_EchoBroadcastResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoBroadcastResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ArmyAntMessage.SubApps.C2SM_EchoBroadcastRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 result = 1;
 * @return {number}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoBroadcastResponse.prototype.getResult = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ArmyAntMessage.SubApps.SM2C_EchoBroadcastResponse.prototype.setResult = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoBroadcastResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ArmyAntMessage.SubApps.SM2C_EchoBroadcastResponse.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional C2SM_EchoBroadcastRequest request = 3;
 * @return {?proto.ArmyAntMessage.SubApps.C2SM_EchoBroadcastRequest}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoBroadcastResponse.prototype.getRequest = function() {
  return /** @type{?proto.ArmyAntMessage.SubApps.C2SM_EchoBroadcastRequest} */ (
    jspb.Message.getWrapperField(this, proto.ArmyAntMessage.SubApps.C2SM_EchoBroadcastRequest, 3));
};


/** @param {?proto.ArmyAntMessage.SubApps.C2SM_EchoBroadcastRequest|undefined} value */
proto.ArmyAntMessage.SubApps.SM2C_EchoBroadcastResponse.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.ArmyAntMessage.SubApps.SM2C_EchoBroadcastResponse.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoBroadcastResponse.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoReceiveNotice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ArmyAntMessage.SubApps.SM2C_EchoReceiveNotice, jspb.Message);
  {
  proto.ArmyAntMessage.SubApps.SM2C_EchoReceiveNotice.displayName = 'proto.ArmyAntMessage.SubApps.SM2C_EchoReceiveNotice';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoReceiveNotice.prototype.toObject = function(opt_includeInstance) {
  return proto.ArmyAntMessage.SubApps.SM2C_EchoReceiveNotice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ArmyAntMessage.SubApps.SM2C_EchoReceiveNotice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoReceiveNotice.toObject = function(includeInstance, msg) {
  var f, obj = {
    isBroadcast: jspb.Message.getFieldWithDefault(msg, 1, false),
    from: jspb.Message.getFieldWithDefault(msg, 2, ""),
    message: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ArmyAntMessage.SubApps.SM2C_EchoReceiveNotice}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoReceiveNotice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ArmyAntMessage.SubApps.SM2C_EchoReceiveNotice;
  return proto.ArmyAntMessage.SubApps.SM2C_EchoReceiveNotice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ArmyAntMessage.SubApps.SM2C_EchoReceiveNotice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ArmyAntMessage.SubApps.SM2C_EchoReceiveNotice}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoReceiveNotice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsBroadcast(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoReceiveNotice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ArmyAntMessage.SubApps.SM2C_EchoReceiveNotice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ArmyAntMessage.SubApps.SM2C_EchoReceiveNotice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoReceiveNotice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsBroadcast();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional bool is_broadcast = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoReceiveNotice.prototype.getIsBroadcast = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.ArmyAntMessage.SubApps.SM2C_EchoReceiveNotice.prototype.setIsBroadcast = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string from = 2;
 * @return {string}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoReceiveNotice.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ArmyAntMessage.SubApps.SM2C_EchoReceiveNotice.prototype.setFrom = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoReceiveNotice.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.ArmyAntMessage.SubApps.SM2C_EchoReceiveNotice.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ArmyAntMessage.SubApps.SM2C_EchoError, jspb.Message);
  {
  proto.ArmyAntMessage.SubApps.SM2C_EchoError.displayName = 'proto.ArmyAntMessage.SubApps.SM2C_EchoError';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoError.prototype.toObject = function(opt_includeInstance) {
  return proto.ArmyAntMessage.SubApps.SM2C_EchoError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ArmyAntMessage.SubApps.SM2C_EchoError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoError.toObject = function(includeInstance, msg) {
  var f, obj = {
    errorCode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ArmyAntMessage.SubApps.SM2C_EchoError}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ArmyAntMessage.SubApps.SM2C_EchoError;
  return proto.ArmyAntMessage.SubApps.SM2C_EchoError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ArmyAntMessage.SubApps.SM2C_EchoError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ArmyAntMessage.SubApps.SM2C_EchoError}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrorCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ArmyAntMessage.SubApps.SM2C_EchoError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ArmyAntMessage.SubApps.SM2C_EchoError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrorCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 error_code = 1;
 * @return {number}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoError.prototype.getErrorCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ArmyAntMessage.SubApps.SM2C_EchoError.prototype.setErrorCode = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.ArmyAntMessage.SubApps.SM2C_EchoError.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ArmyAntMessage.SubApps.SM2C_EchoError.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.ArmyAntMessage.SubApps);
